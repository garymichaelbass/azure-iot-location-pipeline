
      - name: Attempt Terraform Destroy with Lock Handling
        id: terraform_destroy_attempt
        # This step attempts the terraform destroy command.
        # If it fails due to a state lock, it extracts the lock ID,
        # performs a force-unlock, and then retries the destroy operation.
        run: |
          # Navigate to the terraform directory
          cd terraform

          # Define the terraform destroy command with all necessary variables.
          DESTROY_COMMAND="terraform destroy -auto-approve \
            -var=\"github_client_id=${{ secrets.AZURE_CLIENT_ID }}\" \
            -var=\"github_client_secret=${{ secrets.AZURE_CLIENT_SECRET }}\" \
            -var=\"github_tenant_id=${{ secrets.AZURE_TENANT_ID }}\" \
            -var=\"github_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}\""

          echo "Attempting initial terraform destroy..."

          # Execute the destroy command, capture both stdout and stderr, and get the exit code.
          # 'set +e' temporarily disables exiting on error for this subshell
          # Allows explicit checking of the exit code and processing of the output.
          set +e
          OUTPUT=$($DESTROY_COMMAND 2>&1)
          DESTROY_EXIT_CODE=$?
          set -e # Re-enable exiting on error, so any subsequent command failures will fail the step.

          # Print the captured output for debugging and visibility in GitHub Actions logs.
          echo "$OUTPUT"

          # Check if the destroy command failed
          if [ $DESTROY_EXIT_CODE -ne 0 ]; then
            # Check if the failure was specifically due to a state lock error message.
            if echo "$OUTPUT" | grep -q "Error acquiring the state lock"; then
              echo "Terraform destroy failed due to state lock. Attempting to unlock..."

              # Extract the lock ID using grep with PCRE regex for lookbehind assertion (\K).
              # The ID is expected to be a standard UUID format (36 characters with hyphens).
              LOCK_ID=$(echo "$OUTPUT" | grep -oP 'ID:\s+\K[0-9a-f-]{36}' | head -n 1)

              if [ -n "$LOCK_ID" ]; then
                echo "Found lock ID: $LOCK_ID. Attempting to force unlock..."
                # Execute terraform force-unlock with the extracted ID.
                # If force-unlock fails, this entire step will fail.
                terraform force-unlock "$LOCK_ID"

                echo "Retrying terraform destroy after force unlock..."
                # Retry the terraform destroy command.
                # If this retry also fails, the entire GitHub Actions step will fail.
                $DESTROY_COMMAND
              else
                echo "ERROR: Could not extract lock ID from the destroy command output."
                echo "Manual intervention may be required to resolve the state lock."
                exit 1 # Fail the step if lock ID couldn't be extracted.
              fi
            else
              # The destroy command failed for a reason other than a state lock.
              echo "ERROR: Terraform destroy failed for an unexpected reason (not a state lock)."
              echo "Please review the output above for more details."
              exit 1 # Fail the step for any other type of error.
            fi
          else
            echo "Terraform destroy completed successfully on first attempt."
          fi
