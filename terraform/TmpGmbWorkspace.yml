jobs:
  deploy-solution:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Good practice

    env:
      # These apply to all steps in this job unless overridden
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Conditionally import resource group if it exists
        run: |
          RG_NAME="iot-location-rg" # Consider making this a job variable or deriving from TF output
          SUB_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          # Check if RG exists in Azure AND is NOT in Terraform state, then import.
          # `terraform state list -id` checks if a specific resource is in state without listing all.
          az group show --name "$RG_NAME" --output none 2>/dev/null && \
          (terraform state list -id="azurerm_resource_group.iot_resource_group" &>/dev/null || \
           terraform import azurerm_resource_group.iot_resource_group "/subscriptions/$SUB_ID/resourceGroups/$RG_NAME") || \
          echo "Resource group '$RG_NAME' does not exist in Azure or is already in state."
        working-directory: ./terraform
        shell: bash {0} # Explicitly use bash for better shell scripting robustness
        env: # <--- ADDED/COPIED THIS ENV BLOCK HERE
          TF_VAR_github_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_github_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_github_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # ARM credentials are inherited from the job's env block, so no need to repeat here
          # unless you specifically want to override them for this step.

      - name: Force Unlock Terraform State (on failure/cancel with specific ID)
        if: ${{ failure() || cancelled() }} # This condition checks the overall job status
        run: |
          echo "Attempting to find and force unlock the Terraform state lock ID..."

          TF_BACKEND_ACCOUNT_NAME="iotlocationmon20250621"
          TF_BACKEND_CONTAINER_NAME="tfstate"
          TF_STATE_BLOB_KEY="iot-solution.tfstate"

          LOCK_ID=$(az storage blob metadata show \
            --account-name "$TF_BACKEND_ACCOUNT_NAME" \
            --container-name "$TF_BACKEND_CONTAINER_NAME" \
            --name "$TF_STATE_BLOB_KEY" \
            --query "metadata.terraformlockid" \
            --output tsv 2>/dev/null)

          if [ -n "$LOCK_ID" ]; then
            echo "üí° Found active lock ID: $LOCK_ID from Azure Storage metadata. Attempting force unlock..."
            terraform force-unlock -force "$LOCK_ID" || {
              echo "‚ö†Ô∏è Warning: terraform force-unlock failed for ID $LOCK_ID. It might already be cleared or another issue exists."
            }
            echo "‚úÖ Terraform force-unlock command completed for ID: $LOCK_ID."
          else
            echo "‚úÖ No active lock ID found in Azure Storage metadata for '$TF_STATE_BLOB_KEY'. No unlock needed."
          fi
        working-directory: ./terraform
        # `env` variables for ARM_CLIENT_ID etc. are inherited from the job level, which is sufficient here.

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          TF_VAR_github_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_github_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_github_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # ARM credentials are inherited from the job's env block.

      # ... (rest of your workflow) ...