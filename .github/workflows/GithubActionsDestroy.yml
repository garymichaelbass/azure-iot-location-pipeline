# azure-iot-location-monitoring\.github\workflows\GithubActionsDestroy.tf

name: Terraform Destroy

on:
  workflow_dispatch:  # Manual trigger from GitHub UI

jobs:
  destroy:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Attempt Terraform Destroy with Lock Handling
        id: terraform_destroy_attempt
        # Attempt terraform destroy command.  If the command fails due to a state lock, 
        # extract the lock ID, perform force-unlock, then return the terraform destroy command.
        run: |
          cd terraform

          # Define the terraform destroy command as a shell array on a single line.
          # Populate the variables per the GitHub secrets.
          DESTROY_COMMAND=(terraform destroy -auto-approve \
            -var="github_client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="github_client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var="github_tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="github_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="grafana_admin_principal_id=${{ secrets.AZURE_USER_OBJECT_ID }}")

          echo "Attempting initial terraform destroy..."

          # Execute the destroy command using the array.
          # Capture both stdout and stderr, and get the exit code.
          # 'set +e' temporarily disables exiting on error for this subshell,
          # allowing explicit checking of the exit code and processing of the output.
          set +e
          # "${DESTROY_COMMAND[@]}" expands the array elements as separate, properly quoted arguments.
          OUTPUT=$("${DESTROY_COMMAND[@]}" 2>&1)
          DESTROY_EXIT_CODE=$?
          set -e # Re-enable exiting on error, so any subsequent command failures will fail the step.

          # Print the captured output for debugging and visibility in GitHub Actions logs.
          echo "$OUTPUT"

          # GMB DELETE THE REST OF THIS UPON SUCCESSFULY DESTROY OF TERRAFORM
          # # Check if the destroy command failed
          # if [ $DESTROY_EXIT_CODE -ne 0 ]; then
          #   # Check if the failure was specifically due to a state lock error message.
          #   if echo "$OUTPUT" | grep -q "Error acquiring the state lock"; then
          #     echo "Terraform destroy failed due to state lock. Attempting to unlock..."

          #     # Extract the lock ID using grep with PCRE regex for lookbehind assertion (\K).
          #     # The ID is expected to be a standard UUID format (36 characters with hyphens).
          #     LOCK_ID=$(echo "$OUTPUT" | grep -oP 'ID:\s+\K[0-9a-f-]{36}' | head -n 1)

          #     if [ -n "$LOCK_ID" ]; then
          #       echo "Found lock ID: $LOCK_ID. Attempting to force unlock..."
          #       # Execute terraform force-unlock with the extracted ID and the --force flag.
          #       # The -force flag is used for non-interactive environments to prevent prompting.
          #       # If force-unlock fails, this entire step will fail.
          #       terraform force-unlock -force "$LOCK_ID"

          #       echo "Retrying terraform destroy after force unlock..."
          #       # Retry the terraform destroy command using the array.
          #       # If this retry also fails, the entire GitHub Actions step will fail.
          #       "${DESTROY_COMMAND[@]}"
          #     else
          #       echo "ERROR: Could not extract lock ID from the destroy command output."
          #       echo "Manual intervention may be required to resolve the state lock."
          #       exit 1 # Fail the step if lock ID couldn't be extracted.
          #     fi
          #   else
          #     # The destroy command failed for a reason other than a state lock.
          #     echo "ERROR: Terraform destroy failed for an unexpected reason (not a state lock)."
          #     echo "Please review the output above for more details."
          #     exit 1 # Fail the step for any other type of error.
          #   fi
          # else
          #   echo "Terraform destroy completed successfully on first attempt."
          # fi
