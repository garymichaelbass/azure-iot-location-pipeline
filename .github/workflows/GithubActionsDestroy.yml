# azure-iot-location-monitoring\.github\workflows\GithubActionsDestroy.tf

name: Terraform Destroy

on:
  workflow_dispatch:  # Manual trigger from GitHub UI

jobs:
  destroy:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Attempt Terraform Destroy with Lock Handling
        id: terraform_destroy_attempt
        # Attempt terraform destroy command.  If the command fails due to a state lock, 
        # extract the lock ID, perform force-unlock, then return the terraform destroy command.
        run: |
          cd terraform

          # Define the terraform destroy command as a shell array on a single line.
          # Populate the variables per the GitHub secrets.
          DESTROY_COMMAND=(terraform destroy -auto-approve \
            -var="github_client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="github_client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var="github_tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="github_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="grafana_admin_principal_id=${{ secrets.AZURE_USER_OBJECT_ID }}")

          echo "Attempting initial terraform destroy..."

          # Execute the destroy command using the array.
          # Capture both stdout and stderr, and get the exit code.
          # 'set +e' temporarily disables exiting on error for this subshell,
          # allowing explicit checking of the exit code and processing of the output.
          set +e
          # "${DESTROY_COMMAND[@]}" expands the array elements as separate, properly quoted arguments.
          OUTPUT=$("${DESTROY_COMMAND[@]}" 2>&1)
          DESTROY_EXIT_CODE=$?
          set -e # Re-enable exiting on error, so any subsequent command failures will fail the step.

          # Print the captured output for debugging and visibility in GitHub Actions logs.
          echo "$OUTPUT"
